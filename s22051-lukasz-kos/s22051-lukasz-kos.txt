16-17.X.2020
First lessons (lecture and workshop).
* Tried to learn Git, in particular commands like: init, clone, add, commit, status, branch, checkout, merge, fetch, rebase, revert, reset, pull, push, remote. 
Still needs practice, recalling all the details isn't effective. 
* Still need to learn and understands git commands like 'git gc'. 
* Try to finish learngitbranching.js 
* Try to learn linux terminal commands from lecture presentation. Still half to go.
* Prepare for another workshop about changing access permission of a file on linux
* Still need to learn linux topography of the filesystem, especially main directories

7-8.XI.2020
* Pliki utworzone przeze mnie w cudzym katalogu sa moja wlasnoscia i vice versa. Jesli wiec odpowiednio przypisze uprawnienia (np. 744) to wlasciciel maszyny nie bedzie w stanie usunac mojego pliku
* Jesli najpierw usuniemy wszelkie prawa dostepu do katalogu biezacego to nie bedziemy w stanie zmienic uprawnien katalogu nadrzednego z tej pozycji. Trzeba najpierw przejsc (cd) wyzej.
* Jesli w strukturze katalogow ABC/XYZ, ABC zostanie pozbawione uprawnieniado wykonywania to nie bedzie mozna przejsc do katalogu XYZ.
* Operator > w poleceniu echo zapisuje tresc calego komunikatu jako plik, natomiast operator >> powoduje, ze tresc komunikatu zostaje zapisana w pliku w nowej linii, bez usuwania poprzedniej zawartosci pliku.
* Minimalne uprawnienie, ktore pozwoli na zobaczenie strony internetowej dla katalogu domowego, folderu public_html oraz pliku .html to uprawnienia do odczytu i wykonania dla pozostalych osob (005).
* Podczas tworzenia nowego pliku wartosc standardowa dostepu (777 dla katalogu i 666 dla pliku) jest ograniczana przez maske, ktora wywolujemy komenda umask. Wartosc uprawnienia pliku jest koniunkcja logiczna (AND) binarnej wartosci domyslnej i negacji maski (rowniez w postaci binarnej).

21-22.XI.2020
* Polecenie grep jest używane do filtrowania wynikow. Moze byc uzywane poprzez potoki.
* > pozwala na przekierowanie danych wyjsciowych z pliku/programu do danych wejsciowych z pliku/programu poprzez nadpisanie.
* Polecenie ps wyswietla liste procesow. ps -a wyswietla wszystkie procesy poza tymi zwiazanymi z terminalem; ps x wyswietla wszystkie procesy, ktorych jestes wlascicielem (bez terminala); ps aux drukuje wszystkie procesy w systemie. ps -u nazwa_uzytkownika drukuje wszystkie procesy uzytkownika o nazwie nazwa_uzytkownika.
* komenda kill sluzy do zabijania procesow o okreslonym numerze PID, ktory mozna wyswietlic komenda ps. killall sluzy do ubijania procesow o okreslonej nazwie.
* Skrot Ctrl+C wysyla sygnal zakonczenia przesylania danych. Innymi słowy dane, które aktualnie wpisujemy nie zostaną zapisane/wykorzystane.
* Skrot Ctrl+D wysyla sygnal zakonczenia strumienia wejsciowego. Wowczas wspisywane dane zostana dodatkowo zapisane/wykorzystane.
* Skrot Ctrl+Z sluzy do zatrzymywania programow uruchomionych w terminalu.
* Domyslnie programy uruchomione w terminalu sa uruchamiane w pierwszym planie (czyli terminal jest zablokowany). Aby moc korzystac z terminala nalezy program zatrzymac, nastepnie wyswietlic liste programow uruchomionych poprzez teminal (jobs), znalezc interesujacy nas numer programu, po czym uruchomic okreslony program poleceniem bg %numer 
* Mozna od razu uruchomic program w tle poprzez komende nazwa_programu &
* Dalsze szczegoly tu: https://www.notion.so/kosiarz/Linux-eaed4ccbbc8d4ad686efc4a93fd84565

5.XII.2020
1. Aby przejść z katalogu kota do katalogu ale można wpisać:
	cd ../../../kot/ma/ale/ # to jest ścieżka względna
	cd ~/tmp/ukos/kot/ma/ale/ # to jest ścieżka bezwzględna
2. Z tego samego katalogu tworzymy drzewo katalogów przy wykorzystaniu ścieżki bezwględnej (w tym przykładzie, nic nie stoi na przeszkodzie aby zrobić to przy wykrzystaniu ścieżki relatywnej)
	mkdir -p ~/tmp/ukos/kot/ma/ale/jan/kowalski
3. Przenoszenie drzewa katalogów przy wykorzystaniu ścieżki bezwzględnej
	mv ~/tmp/ukos/kot/ma/ale/ ~/tmp/ukos/ala/i/
4. Jeśli program nie reaguje na Ctrl+C, a chcemy go ubić to wpisujemy w terminal ps, wyszukujemy numer PID (process identification), a następnie wpisujemy 
	kill -9 <numer PID> # -9 to sygnał ubicia
5. Aby wyświetlić pliki zaczynające się od al to używamy komendy:
	ls | grep ^al # filtry ustalamy wyrażeniami regularnymi
6. Aby każdy mógł wejść do folderu należy przypisać uprawnienia odczytu i wykonywania, np.
	chmod 555 folder/
   Aby grupa mogła wyświetlić zawartość folderu należy ustawić uprawnienia odczytu dla grupy, np. 
    chmod g=r ala/
   Aby przypisać właścicielowi pełne prawa należy wpisać, np.
	chmod u+rwx ala/
7. Aby utworzyć plik z listą plików i katalogów w bieżącym katalogu należy wpisać
	ls > lista.txt
8. Jedyne co mi przychodzi do głowy to złe przypisanie uprawnień.
9. Tab pozwala na uzupełnianie poleceń
10. Pierwszy sposób na odpalenie programu z terminala w taki sposób, aby nie blokował konsoli to:
	nazwa_programu &
	Drugi sposób polega na normalnym uruchomieniu programu, wpisując jego nazwę w konsoli. Następnie w oknie terminala wciskamy Ctrl+Z i zatrzymujemy program. Potem wywołujemy polecenie jobs, patrzymy na numer programu i wywołujemy go poleceniem bg <numer> (lub bg %<numer>)

19.XII.2020.
Licencje wolnego oprogramowania.

* GNU General Public License (od Projektu GNU) opiera się na czterech wolnościach:
- wolność uruchamiania programu w dowolnym celu,
- wolność analizowania, jak program działa i dostosowywania go do swoich potrzeb,
- wolność rozpowszechniania niezmodyfikowanej kopii programu,
- wolność udoskonalania programu i publicznego rozpowszechniania własnych ulepszeń, dzięki czemu może z nich skorzystać cała społeczność.
Jest to licencja wirusowa. Innymi słowy, jakiekolwiek wykorzystanie kodu źródłowego na tej licencji wymusza na firmie udostępnienie całości kodu źródłowego komercyjnego produktu, który wykorzystywał fragment kodu oparty na tej licencji.

Kolejne licencje coraz bardziej liberalizują to radykalne podejście.
* Lesser General Public License
Copyleft (kod może być kopiowany i zmieniany). Podobny do GPL z tą różnicą, że biblioteki oparte na tej licencji mogą zostać użyte w programach prawnie zastrzeżonych, ale sam dostęp do kodu źródłowego wykorzystanych bibliotek nie może być utrudniony.

* Berkeley Software Distribution
Opublikowana na Uniwersytecie w Berkley. Pozwala na modyfikacje kodu źródłowego, rozprowadzanie programu z lub bez dostępu do kodu źródłowego i możliwość włączenia programu (lub jego fragmentów) do zamkniętego oprogramowania pod warunkiem opublikowania listy autorów kodu (za ich pisemną zgodą) i przejścia na licencję BSD.

* Apache
Dawniej Apache Software License. Pozwalała na redystrybucję i wykorzystanie kodu źródłowego programów stworzonych (lub licencjonowanych pod szyldem) Apache Software Foundation. 

